import sympy as sym

# Linearisation
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# ψ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# ψ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# ψ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)


# Define all involved symbolic variables

# constants
M, m, g, ell = sym.symbols('M, m, g, ell', real=True, positive=True)

#system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')

# Define φ
phi = (4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)) / (4 * (M + m) - 3 * m * sym.cos(x3)**2)


# Define ψ
phi1 = -3 * (m * ell * x4**2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) - (M + m) * g * sym.sin(x3)) / ((4 * (M + m) - 3 * m * sym.cos(x3)**2) * ell)

def evaluate_at_equilibrium(f):
    return f.subs([(F, 0), (x3, 0), (x4,0)])

dphi_F_eq = evaluate_at_equilibrium(phi.diff(F))
dphi_x3_eq = evaluate_at_equilibrium(phi.diff(x3))
dphi_x4_eq = evaluate_at_equilibrium(phi.diff(x4))
dphi1_F_eq = evaluate_at_equilibrium(phi1.diff(F))
dphi1_x3_eq = evaluate_at_equilibrium(phi1.diff(x3))
dphi1_x4_eq = evaluate_at_equilibrium(phi1.diff(x4))


# x2' = aF - bx3
a = dphi_F_eq
b = dphi_x3_eq

# x4' = cF + dx3
c = dphi1_F_eq
d = dphi1_x3_eq

M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

a_value = a.subs([(M, M_value), (m, m_value)])
b_value = -b.subs([(M, M_value), (m, m_value), (g, g_value)])
c_value = -c.subs([(M, M_value), (m, m_value), (ell, ell_value)])
d_value = d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)])

s, t = sym.symbols('s, t')
a, b, I = sym.symbols('a, b, I', real=True, positive=True)
c, d = sym.symbols('c, d', real=True, positive=True)
G_theta = - c / (s**2 - d)
G_xs = (a * s**2 - a * d +b * c) / (s**4 - s**2 * d)

F_s = I / (s**2 + I)
U_s = G_theta * F_s
U_xs = G_xs * F_s
U_t = sym.inverse_laplace_transform(U_s, s, t)
U_tx = sym.inverse_laplace_transform(U_xs, s, t)


sym.pprint(U_t.simplify())
sym.pprint(U_tx.simplify())
