import sympy as sym

# Linearisation
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# ψ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# ψ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# ψ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dx4)(F0, x30, x40) * (x4 - x40)


# Define all involved symbolic variables

# constants
M, m, g, ell = sym.symbols('M, m, g, ell')

#system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')

# Define φ
phi = (4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)) / (4 * (M + m) - 3 * m * sym.cos(x3)**2)


# Define ψ
phi1 = -3 * (m * ell * x4**2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) - (M + m) * g * sym.sin(x3)) / ((4 * (M + m) - 3 * m * sym.cos(x3)**2) * ell)

def evaluate_at_equilibrium(f):
    return f.subs([(F, 0), (x3, 0), (x4,0)])

dphi_F_eq = evaluate_at_equilibrium(phi.diff(F))
dphi_x3_eq = evaluate_at_equilibrium(phi.diff(x3))
dphi_x4_eq = evaluate_at_equilibrium(phi.diff(x4))
dphi1_F_eq = evaluate_at_equilibrium(phi.diff(F))
dphi1_x3_eq = evaluate_at_equilibrium(phi.diff(x3))
dphi1_x4_eq = evaluate_at_equilibrium(phi.diff(x4))


sym.pprint(dphi_F_eq)
sym.pprint(dphi_x3_eq)
sym.pprint(dphi_x4_eq)
sym.pprint(dphi1_F_eq)
sym.pprint(dphi1_x3_eq)
sym.pprint(dphi1_x4_eq)
